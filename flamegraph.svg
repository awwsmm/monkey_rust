<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="245.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="245.00"> </text><svg id="frames" x="10" width="1180" total_samples="22839"><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (32 samples, 0.14%)</title><rect x="0.0131%" y="101" width="0.1401%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="32"/><text x="0.2631%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (82 samples, 0.36%)</title><rect x="0.1532%" y="101" width="0.3590%" height="15" fill="rgb(217,0,24)" fg:x="35" fg:w="82"/><text x="0.4032%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (28 samples, 0.12%)</title><rect x="0.5123%" y="101" width="0.1226%" height="15" fill="rgb(221,193,54)" fg:x="117" fg:w="28"/><text x="0.7623%" y="111.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (14 samples, 0.06%)</title><rect x="0.7619%" y="85" width="0.0613%" height="15" fill="rgb(248,212,6)" fg:x="174" fg:w="14"/><text x="1.0119%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (26 samples, 0.11%)</title><rect x="0.8275%" y="85" width="0.1138%" height="15" fill="rgb(208,68,35)" fg:x="189" fg:w="26"/><text x="1.0775%" y="95.50"></text></g><g><title>&lt;benchmark::object::ClosureObj as core::clone::Clone&gt;::clone (87 samples, 0.38%)</title><rect x="0.6349%" y="101" width="0.3809%" height="15" fill="rgb(232,128,0)" fg:x="145" fg:w="87"/><text x="0.8849%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::repeat (17 samples, 0.07%)</title><rect x="0.9414%" y="85" width="0.0744%" height="15" fill="rgb(207,160,47)" fg:x="215" fg:w="17"/><text x="1.1914%" y="95.50"></text></g><g><title>&lt;benchmark::object::CompiledFunctionObj as core::clone::Clone&gt;::clone (26 samples, 0.11%)</title><rect x="1.0158%" y="101" width="0.1138%" height="15" fill="rgb(228,23,34)" fg:x="232" fg:w="26"/><text x="1.2658%" y="111.50"></text></g><g><title>&lt;benchmark::object::Object as core::clone::Clone&gt;::clone (314 samples, 1.37%)</title><rect x="1.1296%" y="101" width="1.3748%" height="15" fill="rgb(218,30,26)" fg:x="258" fg:w="314"/><text x="1.3796%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.08%)</title><rect x="3.7611%" y="85" width="0.0832%" height="15" fill="rgb(220,122,19)" fg:x="859" fg:w="19"/><text x="4.0111%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (7 samples, 0.03%)</title><rect x="3.9319%" y="69" width="0.0306%" height="15" fill="rgb(250,228,42)" fg:x="898" fg:w="7"/><text x="4.1819%" y="79.50"></text></g><g><title>&lt;benchmark::object::ClosureObj as core::clone::Clone&gt;::clone (43 samples, 0.19%)</title><rect x="3.8487%" y="85" width="0.1883%" height="15" fill="rgb(240,193,28)" fg:x="879" fg:w="43"/><text x="4.0987%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::repeat (17 samples, 0.07%)</title><rect x="3.9625%" y="69" width="0.0744%" height="15" fill="rgb(216,20,37)" fg:x="905" fg:w="17"/><text x="4.2125%" y="79.50"></text></g><g><title>&lt;benchmark::object::CompiledFunctionObj as core::clone::Clone&gt;::clone (28 samples, 0.12%)</title><rect x="4.0370%" y="85" width="0.1226%" height="15" fill="rgb(206,188,39)" fg:x="922" fg:w="28"/><text x="4.2870%" y="95.50"></text></g><g><title>&lt;benchmark::object::IntegerObj as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="4.1596%" y="85" width="0.0175%" height="15" fill="rgb(217,207,13)" fg:x="950" fg:w="4"/><text x="4.4096%" y="95.50"></text></g><g><title>&lt;benchmark::object::Object as core::clone::Clone&gt;::clone (401 samples, 1.76%)</title><rect x="4.1771%" y="85" width="1.7558%" height="15" fill="rgb(231,73,38)" fg:x="954" fg:w="401"/><text x="4.4271%" y="95.50"></text></g><g><title>DYLD-STUB$$malloc (15 samples, 0.07%)</title><rect x="5.9372%" y="69" width="0.0657%" height="15" fill="rgb(225,20,46)" fg:x="1356" fg:w="15"/><text x="6.1872%" y="79.50"></text></g><g><title>__rdl_alloc (13 samples, 0.06%)</title><rect x="6.0029%" y="69" width="0.0569%" height="15" fill="rgb(210,31,41)" fg:x="1371" fg:w="13"/><text x="6.2529%" y="79.50"></text></g><g><title>_malloc_zone_malloc (85 samples, 0.37%)</title><rect x="6.0598%" y="69" width="0.3722%" height="15" fill="rgb(221,200,47)" fg:x="1384" fg:w="85"/><text x="6.3098%" y="79.50"></text></g><g><title>alloc::alloc::alloc (223 samples, 0.98%)</title><rect x="5.9372%" y="85" width="0.9764%" height="15" fill="rgb(226,26,5)" fg:x="1356" fg:w="223"/><text x="6.1872%" y="95.50"></text></g><g><title>nanov2_malloc_type (110 samples, 0.48%)</title><rect x="6.4320%" y="69" width="0.4816%" height="15" fill="rgb(249,33,26)" fg:x="1469" fg:w="110"/><text x="6.6820%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (14 samples, 0.06%)</title><rect x="6.9136%" y="85" width="0.0613%" height="15" fill="rgb(235,183,28)" fg:x="1579" fg:w="14"/><text x="7.1636%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (11 samples, 0.05%)</title><rect x="6.9749%" y="85" width="0.0482%" height="15" fill="rgb(221,5,38)" fg:x="1593" fg:w="11"/><text x="7.2249%" y="95.50"></text></g><g><title>DYLD-STUB$$memcpy (3 samples, 0.01%)</title><rect x="7.0493%" y="69" width="0.0131%" height="15" fill="rgb(247,18,42)" fg:x="1610" fg:w="3"/><text x="7.2993%" y="79.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1,152 samples, 5.04%)</title><rect x="2.5045%" y="101" width="5.0440%" height="15" fill="rgb(241,131,45)" fg:x="572" fg:w="1152"/><text x="2.7545%" y="111.50">&lt;core:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (120 samples, 0.53%)</title><rect x="7.0231%" y="85" width="0.5254%" height="15" fill="rgb(249,31,29)" fg:x="1604" fg:w="120"/><text x="7.2731%" y="95.50"></text></g><g><title>_platform_memmove (111 samples, 0.49%)</title><rect x="7.0625%" y="69" width="0.4860%" height="15" fill="rgb(225,111,53)" fg:x="1613" fg:w="111"/><text x="7.3125%" y="79.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (159 samples, 0.70%)</title><rect x="7.5485%" y="101" width="0.6962%" height="15" fill="rgb(238,160,17)" fg:x="1724" fg:w="159"/><text x="7.7985%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (186 samples, 0.81%)</title><rect x="8.2447%" y="101" width="0.8144%" height="15" fill="rgb(214,148,48)" fg:x="1883" fg:w="186"/><text x="8.4947%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (78 samples, 0.34%)</title><rect x="9.0591%" y="101" width="0.3415%" height="15" fill="rgb(232,36,49)" fg:x="2069" fg:w="78"/><text x="9.3091%" y="111.50"></text></g><g><title>_free (46 samples, 0.20%)</title><rect x="9.4006%" y="101" width="0.2014%" height="15" fill="rgb(209,103,24)" fg:x="2147" fg:w="46"/><text x="9.6506%" y="111.50"></text></g><g><title>_malloc_zone_malloc (31 samples, 0.14%)</title><rect x="9.6020%" y="101" width="0.1357%" height="15" fill="rgb(229,88,8)" fg:x="2193" fg:w="31"/><text x="9.8520%" y="111.50"></text></g><g><title>_nanov2_free (216 samples, 0.95%)</title><rect x="9.7377%" y="101" width="0.9458%" height="15" fill="rgb(213,181,19)" fg:x="2224" fg:w="216"/><text x="9.9877%" y="111.50"></text></g><g><title>_platform_memmove (68 samples, 0.30%)</title><rect x="10.6835%" y="101" width="0.2977%" height="15" fill="rgb(254,191,54)" fg:x="2440" fg:w="68"/><text x="10.9335%" y="111.50"></text></g><g><title>DYLD-STUB$$malloc (177 samples, 0.77%)</title><rect x="11.0075%" y="85" width="0.7750%" height="15" fill="rgb(241,83,37)" fg:x="2514" fg:w="177"/><text x="11.2575%" y="95.50"></text></g><g><title>__rdl_alloc (166 samples, 0.73%)</title><rect x="11.7825%" y="85" width="0.7268%" height="15" fill="rgb(233,36,39)" fg:x="2691" fg:w="166"/><text x="12.0325%" y="95.50"></text></g><g><title>_malloc_zone_malloc (1,194 samples, 5.23%)</title><rect x="12.5093%" y="85" width="5.2279%" height="15" fill="rgb(226,3,54)" fg:x="2857" fg:w="1194"/><text x="12.7593%" y="95.50">_mallo..</text></g><g><title>alloc::alloc::alloc (3,126 samples, 13.69%)</title><rect x="10.9812%" y="101" width="13.6871%" height="15" fill="rgb(245,192,40)" fg:x="2508" fg:w="3126"/><text x="11.2312%" y="111.50">alloc::alloc::alloc</text></g><g><title>nanov2_malloc_type (1,581 samples, 6.92%)</title><rect x="17.7460%" y="85" width="6.9224%" height="15" fill="rgb(238,167,29)" fg:x="4053" fg:w="1581"/><text x="17.9960%" y="95.50">nanov2_ma..</text></g><g><title>DYLD-STUB$$_platform_bzero (6 samples, 0.03%)</title><rect x="25.0536%" y="85" width="0.0263%" height="15" fill="rgb(232,182,51)" fg:x="5722" fg:w="6"/><text x="25.3036%" y="95.50"></text></g><g><title>DYLD-STUB$$free (565 samples, 2.47%)</title><rect x="25.0799%" y="85" width="2.4738%" height="15" fill="rgb(231,60,39)" fg:x="5728" fg:w="565"/><text x="25.3299%" y="95.50">DY..</text></g><g><title>__bzero (3 samples, 0.01%)</title><rect x="27.5537%" y="85" width="0.0131%" height="15" fill="rgb(208,69,12)" fg:x="6293" fg:w="3"/><text x="27.8037%" y="95.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.02%)</title><rect x="27.5669%" y="85" width="0.0219%" height="15" fill="rgb(235,93,37)" fg:x="6296" fg:w="5"/><text x="27.8169%" y="95.50"></text></g><g><title>_free (1,442 samples, 6.31%)</title><rect x="27.5888%" y="85" width="6.3138%" height="15" fill="rgb(213,116,39)" fg:x="6301" fg:w="1442"/><text x="27.8388%" y="95.50">_free</text></g><g><title>DYLD-STUB$$_platform_bzero (193 samples, 0.85%)</title><rect x="48.0932%" y="69" width="0.8450%" height="15" fill="rgb(222,207,29)" fg:x="10984" fg:w="193"/><text x="48.3432%" y="79.50"></text></g><g><title>__bzero (92 samples, 0.40%)</title><rect x="48.9382%" y="69" width="0.4028%" height="15" fill="rgb(206,96,30)" fg:x="11177" fg:w="92"/><text x="49.1882%" y="79.50"></text></g><g><title>_nanov2_free (4,192 samples, 18.35%)</title><rect x="33.9025%" y="85" width="18.3546%" height="15" fill="rgb(218,138,4)" fg:x="7743" fg:w="4192"/><text x="34.1525%" y="95.50">_nanov2_free</text></g><g><title>_platform_memset (666 samples, 2.92%)</title><rect x="49.3410%" y="69" width="2.9161%" height="15" fill="rgb(250,191,14)" fg:x="11269" fg:w="666"/><text x="49.5910%" y="79.50">_p..</text></g><g><title>_platform_memset (26 samples, 0.11%)</title><rect x="52.2571%" y="85" width="0.1138%" height="15" fill="rgb(239,60,40)" fg:x="11935" fg:w="26"/><text x="52.5071%" y="95.50"></text></g><g><title>free (10 samples, 0.04%)</title><rect x="52.3709%" y="85" width="0.0438%" height="15" fill="rgb(206,27,48)" fg:x="11961" fg:w="10"/><text x="52.6209%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (6,340 samples, 27.76%)</title><rect x="24.6683%" y="101" width="27.7595%" height="15" fill="rgb(225,35,8)" fg:x="5634" fg:w="6340"/><text x="24.9183%" y="111.50">alloc::alloc::dealloc</text></g><g><title>nanov2_try_free_default (3 samples, 0.01%)</title><rect x="52.4147%" y="85" width="0.0131%" height="15" fill="rgb(250,213,24)" fg:x="11971" fg:w="3"/><text x="52.6647%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (26 samples, 0.11%)</title><rect x="52.4279%" y="101" width="0.1138%" height="15" fill="rgb(247,123,22)" fg:x="11974" fg:w="26"/><text x="52.6779%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (7 samples, 0.03%)</title><rect x="52.5417%" y="101" width="0.0306%" height="15" fill="rgb(231,138,38)" fg:x="12000" fg:w="7"/><text x="52.7917%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (294 samples, 1.29%)</title><rect x="52.5724%" y="101" width="1.2873%" height="15" fill="rgb(231,145,46)" fg:x="12007" fg:w="294"/><text x="52.8224%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (567 samples, 2.48%)</title><rect x="53.8596%" y="101" width="2.4826%" height="15" fill="rgb(251,118,11)" fg:x="12301" fg:w="567"/><text x="54.1096%" y="111.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (178 samples, 0.78%)</title><rect x="56.3422%" y="101" width="0.7794%" height="15" fill="rgb(217,147,25)" fg:x="12868" fg:w="178"/><text x="56.5922%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (22 samples, 0.10%)</title><rect x="57.1216%" y="101" width="0.0963%" height="15" fill="rgb(247,81,37)" fg:x="13046" fg:w="22"/><text x="57.3716%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14 samples, 0.06%)</title><rect x="57.2179%" y="101" width="0.0613%" height="15" fill="rgb(209,12,38)" fg:x="13068" fg:w="14"/><text x="57.4679%" y="111.50"></text></g><g><title>benchmark::code::_&lt;impl core::convert::Into&lt;benchmark::code::Definition&gt; for u8&gt;::into (14 samples, 0.06%)</title><rect x="57.2792%" y="101" width="0.0613%" height="15" fill="rgb(227,1,9)" fg:x="13082" fg:w="14"/><text x="57.5292%" y="111.50"></text></g><g><title>benchmark::code::_&lt;impl core::convert::Into&lt;benchmark::code::Opcode&gt; for u8&gt;::into (1,929 samples, 8.45%)</title><rect x="57.3405%" y="101" width="8.4461%" height="15" fill="rgb(248,47,43)" fg:x="13096" fg:w="1929"/><text x="57.5905%" y="111.50">benchmark::c..</text></g><g><title>benchmark::code::_&lt;impl core::convert::Into&lt;benchmark::code::Definition&gt; for u8&gt;::into (1,904 samples, 8.34%)</title><rect x="57.4500%" y="85" width="8.3366%" height="15" fill="rgb(221,10,30)" fg:x="13121" fg:w="1904"/><text x="57.7000%" y="95.50">benchmark::c..</text></g><g><title>benchmark::object::Object::inner (10 samples, 0.04%)</title><rect x="65.7866%" y="101" width="0.0438%" height="15" fill="rgb(210,229,1)" fg:x="15025" fg:w="10"/><text x="66.0366%" y="111.50"></text></g><g><title>benchmark::vm::VM::call_closure (69 samples, 0.30%)</title><rect x="65.8304%" y="101" width="0.3021%" height="15" fill="rgb(222,148,37)" fg:x="15035" fg:w="69"/><text x="66.0804%" y="111.50"></text></g><g><title>benchmark::vm::VM::current_frame (11 samples, 0.05%)</title><rect x="66.1325%" y="101" width="0.0482%" height="15" fill="rgb(234,67,33)" fg:x="15104" fg:w="11"/><text x="66.3825%" y="111.50"></text></g><g><title>benchmark::vm::VM::push (68 samples, 0.30%)</title><rect x="66.5572%" y="85" width="0.2977%" height="15" fill="rgb(247,98,35)" fg:x="15201" fg:w="68"/><text x="66.8072%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;benchmark::object::Object&gt; (82 samples, 0.36%)</title><rect x="66.8549%" y="85" width="0.3590%" height="15" fill="rgb(247,138,52)" fg:x="15269" fg:w="82"/><text x="67.1049%" y="95.50"></text></g><g><title>benchmark::vm::VM::execute_binary_integer_operation (316 samples, 1.38%)</title><rect x="66.1807%" y="101" width="1.3836%" height="15" fill="rgb(213,79,30)" fg:x="15115" fg:w="316"/><text x="66.4307%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;benchmark::object::Object&gt;&gt; (80 samples, 0.35%)</title><rect x="67.2140%" y="85" width="0.3503%" height="15" fill="rgb(246,177,23)" fg:x="15351" fg:w="80"/><text x="67.4640%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;benchmark::object::Object&gt; (50 samples, 0.22%)</title><rect x="67.3453%" y="69" width="0.2189%" height="15" fill="rgb(230,62,27)" fg:x="15381" fg:w="50"/><text x="67.5953%" y="79.50"></text></g><g><title>&lt;benchmark::object::IntegerObj as benchmark::object::ObjectLike&gt;::object_type (28 samples, 0.12%)</title><rect x="68.0722%" y="85" width="0.1226%" height="15" fill="rgb(216,154,8)" fg:x="15547" fg:w="28"/><text x="68.3222%" y="95.50"></text></g><g><title>_malloc_zone_malloc (7 samples, 0.03%)</title><rect x="68.1948%" y="85" width="0.0306%" height="15" fill="rgb(244,35,45)" fg:x="15575" fg:w="7"/><text x="68.4448%" y="95.50"></text></g><g><title>DYLD-STUB$$malloc (30 samples, 0.13%)</title><rect x="68.2254%" y="69" width="0.1314%" height="15" fill="rgb(251,115,12)" fg:x="15582" fg:w="30"/><text x="68.4754%" y="79.50"></text></g><g><title>__rdl_alloc (31 samples, 0.14%)</title><rect x="68.3568%" y="69" width="0.1357%" height="15" fill="rgb(240,54,50)" fg:x="15612" fg:w="31"/><text x="68.6068%" y="79.50"></text></g><g><title>_malloc_zone_malloc (206 samples, 0.90%)</title><rect x="68.4925%" y="69" width="0.9020%" height="15" fill="rgb(233,84,52)" fg:x="15643" fg:w="206"/><text x="68.7425%" y="79.50"></text></g><g><title>malloc (5 samples, 0.02%)</title><rect x="69.3945%" y="69" width="0.0219%" height="15" fill="rgb(207,117,47)" fg:x="15849" fg:w="5"/><text x="69.6445%" y="79.50"></text></g><g><title>alloc::alloc::alloc (577 samples, 2.53%)</title><rect x="68.2254%" y="85" width="2.5264%" height="15" fill="rgb(249,43,39)" fg:x="15582" fg:w="577"/><text x="68.4754%" y="95.50">al..</text></g><g><title>nanov2_malloc_type (305 samples, 1.34%)</title><rect x="69.4163%" y="69" width="1.3354%" height="15" fill="rgb(209,38,44)" fg:x="15854" fg:w="305"/><text x="69.6663%" y="79.50"></text></g><g><title>alloc::alloc::exchange_malloc (11 samples, 0.05%)</title><rect x="70.7518%" y="85" width="0.0482%" height="15" fill="rgb(236,212,23)" fg:x="16159" fg:w="11"/><text x="71.0018%" y="95.50"></text></g><g><title>benchmark::object::Object::inner (17 samples, 0.07%)</title><rect x="70.7999%" y="85" width="0.0744%" height="15" fill="rgb(242,79,21)" fg:x="16170" fg:w="17"/><text x="71.0499%" y="95.50"></text></g><g><title>benchmark::vm::VM::execute_binary_operation (815 samples, 3.57%)</title><rect x="67.5643%" y="101" width="3.5685%" height="15" fill="rgb(211,96,35)" fg:x="15431" fg:w="815"/><text x="67.8143%" y="111.50">benc..</text></g><g><title>core::ptr::read_volatile (59 samples, 0.26%)</title><rect x="70.8744%" y="85" width="0.2583%" height="15" fill="rgb(253,215,40)" fg:x="16187" fg:w="59"/><text x="71.1244%" y="95.50"></text></g><g><title>benchmark::vm::VM::execute_call (101 samples, 0.44%)</title><rect x="71.1327%" y="101" width="0.4422%" height="15" fill="rgb(211,81,21)" fg:x="16246" fg:w="101"/><text x="71.3827%" y="111.50"></text></g><g><title>&lt;benchmark::object::IntegerObj as benchmark::object::ObjectLike&gt;::object_type (58 samples, 0.25%)</title><rect x="72.1135%" y="85" width="0.2540%" height="15" fill="rgb(208,190,38)" fg:x="16470" fg:w="58"/><text x="72.3635%" y="95.50"></text></g><g><title>_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="72.3674%" y="85" width="0.0175%" height="15" fill="rgb(235,213,38)" fg:x="16528" fg:w="4"/><text x="72.6174%" y="95.50"></text></g><g><title>DYLD-STUB$$malloc (40 samples, 0.18%)</title><rect x="72.5032%" y="69" width="0.1751%" height="15" fill="rgb(237,122,38)" fg:x="16559" fg:w="40"/><text x="72.7532%" y="79.50"></text></g><g><title>__rdl_alloc (31 samples, 0.14%)</title><rect x="72.6783%" y="69" width="0.1357%" height="15" fill="rgb(244,218,35)" fg:x="16599" fg:w="31"/><text x="72.9283%" y="79.50"></text></g><g><title>_malloc_zone_malloc (273 samples, 1.20%)</title><rect x="72.8140%" y="69" width="1.1953%" height="15" fill="rgb(240,68,47)" fg:x="16630" fg:w="273"/><text x="73.0640%" y="79.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="74.0094%" y="69" width="0.0175%" height="15" fill="rgb(210,16,53)" fg:x="16903" fg:w="4"/><text x="74.2594%" y="79.50"></text></g><g><title>alloc::alloc::alloc (741 samples, 3.24%)</title><rect x="72.3850%" y="85" width="3.2445%" height="15" fill="rgb(235,124,12)" fg:x="16532" fg:w="741"/><text x="72.6350%" y="95.50">all..</text></g><g><title>nanov2_malloc_type (366 samples, 1.60%)</title><rect x="74.0269%" y="69" width="1.6025%" height="15" fill="rgb(224,169,11)" fg:x="16907" fg:w="366"/><text x="74.2769%" y="79.50"></text></g><g><title>alloc::alloc::exchange_malloc (8 samples, 0.04%)</title><rect x="75.6294%" y="85" width="0.0350%" height="15" fill="rgb(250,166,2)" fg:x="17273" fg:w="8"/><text x="75.8794%" y="95.50"></text></g><g><title>benchmark::object::Object::inner (26 samples, 0.11%)</title><rect x="75.6644%" y="85" width="0.1138%" height="15" fill="rgb(242,216,29)" fg:x="17281" fg:w="26"/><text x="75.9144%" y="95.50"></text></g><g><title>benchmark::vm::VM::execute_comparison (1,017 samples, 4.45%)</title><rect x="71.5749%" y="101" width="4.4529%" height="15" fill="rgb(230,116,27)" fg:x="16347" fg:w="1017"/><text x="71.8249%" y="111.50">bench..</text></g><g><title>core::ptr::read_volatile (57 samples, 0.25%)</title><rect x="75.7783%" y="85" width="0.2496%" height="15" fill="rgb(228,99,48)" fg:x="17307" fg:w="57"/><text x="76.0283%" y="95.50"></text></g><g><title>benchmark::vm::VM::push (76 samples, 0.33%)</title><rect x="76.4219%" y="85" width="0.3328%" height="15" fill="rgb(253,11,6)" fg:x="17454" fg:w="76"/><text x="76.6719%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;benchmark::object::Object&gt; (109 samples, 0.48%)</title><rect x="76.7547%" y="85" width="0.4773%" height="15" fill="rgb(247,143,39)" fg:x="17530" fg:w="109"/><text x="77.0047%" y="95.50"></text></g><g><title>benchmark::vm::VM::execute_integer_comparison (386 samples, 1.69%)</title><rect x="76.0278%" y="101" width="1.6901%" height="15" fill="rgb(236,97,10)" fg:x="17364" fg:w="386"/><text x="76.2778%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;benchmark::object::Object&gt;&gt; (111 samples, 0.49%)</title><rect x="77.2319%" y="85" width="0.4860%" height="15" fill="rgb(233,208,19)" fg:x="17639" fg:w="111"/><text x="77.4819%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;benchmark::object::Object&gt; (48 samples, 0.21%)</title><rect x="77.5078%" y="69" width="0.2102%" height="15" fill="rgb(216,164,2)" fg:x="17702" fg:w="48"/><text x="77.7578%" y="79.50"></text></g><g><title>benchmark::vm::VM::is_truthy (45 samples, 0.20%)</title><rect x="77.7179%" y="101" width="0.1970%" height="15" fill="rgb(220,129,5)" fg:x="17750" fg:w="45"/><text x="77.9679%" y="111.50"></text></g><g><title>benchmark::vm::VM::native_bool_to_boolean_object (198 samples, 0.87%)</title><rect x="77.9150%" y="101" width="0.8669%" height="15" fill="rgb(242,17,10)" fg:x="17795" fg:w="198"/><text x="78.1650%" y="111.50"></text></g><g><title>benchmark::vm::VM::pop (276 samples, 1.21%)</title><rect x="78.7819%" y="101" width="1.2085%" height="15" fill="rgb(242,107,0)" fg:x="17993" fg:w="276"/><text x="79.0319%" y="111.50"></text></g><g><title>benchmark::vm::VM::pop_frame (11 samples, 0.05%)</title><rect x="79.9904%" y="101" width="0.0482%" height="15" fill="rgb(251,28,31)" fg:x="18269" fg:w="11"/><text x="80.2404%" y="111.50"></text></g><g><title>benchmark::vm::VM::push (256 samples, 1.12%)</title><rect x="80.0385%" y="101" width="1.1209%" height="15" fill="rgb(233,223,10)" fg:x="18280" fg:w="256"/><text x="80.2885%" y="111.50"></text></g><g><title>&lt;benchmark::object::Object as core::clone::Clone&gt;::clone (111 samples, 0.49%)</title><rect x="84.4214%" y="85" width="0.4860%" height="15" fill="rgb(215,21,27)" fg:x="19281" fg:w="111"/><text x="84.6714%" y="95.50"></text></g><g><title>benchmark::vm::VM::push (390 samples, 1.71%)</title><rect x="84.9074%" y="85" width="1.7076%" height="15" fill="rgb(232,23,21)" fg:x="19392" fg:w="390"/><text x="85.1574%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;benchmark::object::ClosureObj&gt; (15 samples, 0.07%)</title><rect x="86.6150%" y="85" width="0.0657%" height="15" fill="rgb(244,5,23)" fg:x="19782" fg:w="15"/><text x="86.8650%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;benchmark::object::Object&gt; (64 samples, 0.28%)</title><rect x="86.6807%" y="85" width="0.2802%" height="15" fill="rgb(226,81,46)" fg:x="19797" fg:w="64"/><text x="86.9307%" y="95.50"></text></g><g><title>_nanov2_free (12 samples, 0.05%)</title><rect x="87.5870%" y="69" width="0.0525%" height="15" fill="rgb(247,70,30)" fg:x="20004" fg:w="12"/><text x="87.8370%" y="79.50"></text></g><g><title>DYLD-STUB$$free (16 samples, 0.07%)</title><rect x="87.7622%" y="53" width="0.0701%" height="15" fill="rgb(212,68,19)" fg:x="20044" fg:w="16"/><text x="88.0122%" y="63.50"></text></g><g><title>_free (56 samples, 0.25%)</title><rect x="87.8322%" y="53" width="0.2452%" height="15" fill="rgb(240,187,13)" fg:x="20060" fg:w="56"/><text x="88.0822%" y="63.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (9 samples, 0.04%)</title><rect x="88.7254%" y="37" width="0.0394%" height="15" fill="rgb(223,113,26)" fg:x="20264" fg:w="9"/><text x="88.9754%" y="47.50"></text></g><g><title>__bzero (7 samples, 0.03%)</title><rect x="88.7648%" y="37" width="0.0306%" height="15" fill="rgb(206,192,2)" fg:x="20273" fg:w="7"/><text x="89.0148%" y="47.50"></text></g><g><title>_nanov2_free (222 samples, 0.97%)</title><rect x="88.0774%" y="53" width="0.9720%" height="15" fill="rgb(241,108,4)" fg:x="20116" fg:w="222"/><text x="88.3274%" y="63.50"></text></g><g><title>_platform_memset (58 samples, 0.25%)</title><rect x="88.7955%" y="37" width="0.2540%" height="15" fill="rgb(247,173,49)" fg:x="20280" fg:w="58"/><text x="89.0455%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;benchmark::object::ClosureObj&gt; (326 samples, 1.43%)</title><rect x="87.6396%" y="69" width="1.4274%" height="15" fill="rgb(224,114,35)" fg:x="20016" fg:w="326"/><text x="87.8896%" y="79.50"></text></g><g><title>benchmark::vm::VM::run (2,015 samples, 8.82%)</title><rect x="81.1682%" y="101" width="8.8226%" height="15" fill="rgb(245,159,27)" fg:x="18538" fg:w="2015"/><text x="81.4182%" y="111.50">benchmark::v..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;benchmark::object::Object&gt;&gt; (692 samples, 3.03%)</title><rect x="86.9609%" y="85" width="3.0299%" height="15" fill="rgb(245,172,44)" fg:x="19861" fg:w="692"/><text x="87.2109%" y="95.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;benchmark::object::Object&gt; (211 samples, 0.92%)</title><rect x="89.0669%" y="69" width="0.9239%" height="15" fill="rgb(236,23,11)" fg:x="20342" fg:w="211"/><text x="89.3169%" y="79.50"></text></g><g><title>DYLD-STUB$$memmove (10 samples, 0.04%)</title><rect x="90.0871%" y="85" width="0.0438%" height="15" fill="rgb(205,117,38)" fg:x="20575" fg:w="10"/><text x="90.3371%" y="95.50"></text></g><g><title>core::intrinsics::copy (53 samples, 0.23%)</title><rect x="89.9952%" y="101" width="0.2321%" height="15" fill="rgb(237,72,25)" fg:x="20554" fg:w="53"/><text x="90.2452%" y="111.50"></text></g><g><title>_platform_memmove (22 samples, 0.10%)</title><rect x="90.1309%" y="85" width="0.0963%" height="15" fill="rgb(244,70,9)" fg:x="20585" fg:w="22"/><text x="90.3809%" y="95.50"></text></g><g><title>DYLD-STUB$$memcpy (107 samples, 0.47%)</title><rect x="91.5627%" y="85" width="0.4685%" height="15" fill="rgb(217,125,39)" fg:x="20912" fg:w="107"/><text x="91.8127%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,728 samples, 7.57%)</title><rect x="90.2272%" y="101" width="7.5660%" height="15" fill="rgb(235,36,10)" fg:x="20607" fg:w="1728"/><text x="90.4772%" y="111.50">core::intr..</text></g><g><title>_platform_memmove (1,316 samples, 5.76%)</title><rect x="92.0312%" y="85" width="5.7621%" height="15" fill="rgb(251,123,47)" fg:x="21019" fg:w="1316"/><text x="92.2812%" y="95.50">_platfo..</text></g><g><title>core::ptr::drop_in_place&lt;benchmark::object::ClosureObj&gt; (5 samples, 0.02%)</title><rect x="97.7976%" y="101" width="0.0219%" height="15" fill="rgb(221,13,13)" fg:x="22336" fg:w="5"/><text x="98.0476%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;benchmark::object::Object&gt; (90 samples, 0.39%)</title><rect x="97.8195%" y="101" width="0.3941%" height="15" fill="rgb(238,131,9)" fg:x="22341" fg:w="90"/><text x="98.0695%" y="111.50"></text></g><g><title>_free (5 samples, 0.02%)</title><rect x="98.3055%" y="85" width="0.0219%" height="15" fill="rgb(211,50,8)" fg:x="22452" fg:w="5"/><text x="98.5555%" y="95.50"></text></g><g><title>_nanov2_free (10 samples, 0.04%)</title><rect x="98.3274%" y="85" width="0.0438%" height="15" fill="rgb(245,182,24)" fg:x="22457" fg:w="10"/><text x="98.5774%" y="95.50"></text></g><g><title>DYLD-STUB$$free (11 samples, 0.05%)</title><rect x="98.4763%" y="69" width="0.0482%" height="15" fill="rgb(242,14,37)" fg:x="22491" fg:w="11"/><text x="98.7263%" y="79.50"></text></g><g><title>_free (74 samples, 0.32%)</title><rect x="98.5288%" y="69" width="0.3240%" height="15" fill="rgb(246,228,12)" fg:x="22503" fg:w="74"/><text x="98.7788%" y="79.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (8 samples, 0.04%)</title><rect x="99.5446%" y="53" width="0.0350%" height="15" fill="rgb(213,55,15)" fg:x="22735" fg:w="8"/><text x="99.7946%" y="63.50"></text></g><g><title>__bzero (6 samples, 0.03%)</title><rect x="99.5797%" y="53" width="0.0263%" height="15" fill="rgb(209,9,3)" fg:x="22743" fg:w="6"/><text x="99.8297%" y="63.50"></text></g><g><title>_nanov2_free (218 samples, 0.95%)</title><rect x="98.8528%" y="69" width="0.9545%" height="15" fill="rgb(230,59,30)" fg:x="22577" fg:w="218"/><text x="99.1028%" y="79.50"></text></g><g><title>_platform_memset (46 samples, 0.20%)</title><rect x="99.6059%" y="53" width="0.2014%" height="15" fill="rgb(209,121,21)" fg:x="22749" fg:w="46"/><text x="99.8559%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;benchmark::vm::frame::Frame&gt; (366 samples, 1.60%)</title><rect x="98.2136%" y="101" width="1.6025%" height="15" fill="rgb(220,109,13)" fg:x="22431" fg:w="366"/><text x="98.4636%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;benchmark::object::ClosureObj&gt; (330 samples, 1.44%)</title><rect x="98.3712%" y="85" width="1.4449%" height="15" fill="rgb(232,18,1)" fg:x="22467" fg:w="330"/><text x="98.6212%" y="95.50"></text></g><g><title>core::ptr::read (12 samples, 0.05%)</title><rect x="99.8161%" y="101" width="0.0525%" height="15" fill="rgb(215,41,42)" fg:x="22797" fg:w="12"/><text x="100.0661%" y="111.50"></text></g><g><title>all (22,839 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="22839"/><text x="0.2500%" y="223.50"></text></g><g><title>start (22,839 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,125,3)" fg:x="0" fg:w="22839"/><text x="0.2500%" y="207.50">start</text></g><g><title>main (22,837 samples, 99.99%)</title><rect x="0.0088%" y="181" width="99.9912%" height="15" fill="rgb(205,98,50)" fg:x="2" fg:w="22837"/><text x="0.2588%" y="191.50">main</text></g><g><title>std::rt::lang_start_internal (22,837 samples, 99.99%)</title><rect x="0.0088%" y="165" width="99.9912%" height="15" fill="rgb(205,185,37)" fg:x="2" fg:w="22837"/><text x="0.2588%" y="175.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (22,836 samples, 99.99%)</title><rect x="0.0131%" y="149" width="99.9869%" height="15" fill="rgb(238,207,15)" fg:x="3" fg:w="22836"/><text x="0.2631%" y="159.50">std::rt::lang_start::_{{closure}}</text></g><g><title>core::ops::function::FnOnce::call_once (22,836 samples, 99.99%)</title><rect x="0.0131%" y="133" width="99.9869%" height="15" fill="rgb(213,199,42)" fg:x="3" fg:w="22836"/><text x="0.2631%" y="143.50">core::ops::function::FnOnce::call_once</text></g><g><title>benchmark::main (22,836 samples, 99.99%)</title><rect x="0.0131%" y="117" width="99.9869%" height="15" fill="rgb(235,201,11)" fg:x="3" fg:w="22836"/><text x="0.2631%" y="127.50">benchmark::main</text></g><g><title>core::ptr::write (30 samples, 0.13%)</title><rect x="99.8686%" y="101" width="0.1314%" height="15" fill="rgb(207,46,11)" fg:x="22809" fg:w="30"/><text x="100.1186%" y="111.50"></text></g></svg></svg>